// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: pokemon_battle.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPokeBattle = `-- name: CreatePokeBattle :one
INSERT INTO pokemon_battle (pokemon1, pokemon2, winner) VALUES ($1, $2, $3) RETURNING id, pokemon1, pokemon2, winner
`

type CreatePokeBattleParams struct {
	Pokemon1 string
	Pokemon2 string
	Winner   pgtype.Text
}

func (q *Queries) CreatePokeBattle(ctx context.Context, arg CreatePokeBattleParams) (PokemonBattle, error) {
	row := q.db.QueryRow(ctx, createPokeBattle, arg.Pokemon1, arg.Pokemon2, arg.Winner)
	var i PokemonBattle
	err := row.Scan(
		&i.ID,
		&i.Pokemon1,
		&i.Pokemon2,
		&i.Winner,
	)
	return i, err
}

const getPokeBattle = `-- name: GetPokeBattle :one
SELECT id, pokemon1, pokemon2, winner FROM pokemon_battle WHERE id = $1
`

func (q *Queries) GetPokeBattle(ctx context.Context, id uuid.UUID) (PokemonBattle, error) {
	row := q.db.QueryRow(ctx, getPokeBattle, id)
	var i PokemonBattle
	err := row.Scan(
		&i.ID,
		&i.Pokemon1,
		&i.Pokemon2,
		&i.Winner,
	)
	return i, err
}

const listPokeBattles = `-- name: ListPokeBattles :many
SELECT id, pokemon1, pokemon2, winner FROM pokemon_battle LIMIT $1 OFFSET $2
`

type ListPokeBattlesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListPokeBattles(ctx context.Context, arg ListPokeBattlesParams) ([]PokemonBattle, error) {
	rows, err := q.db.Query(ctx, listPokeBattles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PokemonBattle
	for rows.Next() {
		var i PokemonBattle
		if err := rows.Scan(
			&i.ID,
			&i.Pokemon1,
			&i.Pokemon2,
			&i.Winner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
