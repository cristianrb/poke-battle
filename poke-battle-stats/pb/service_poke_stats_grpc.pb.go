// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: service_poke_stats.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PokeStats_GetPokeStats_FullMethodName = "/pb.PokeStats/GetPokeStats"
)

// PokeStatsClient is the client API for PokeStats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PokeStatsClient interface {
	GetPokeStats(ctx context.Context, in *PokeStatsRequest, opts ...grpc.CallOption) (*PokeStatsResponse, error)
}

type pokeStatsClient struct {
	cc grpc.ClientConnInterface
}

func NewPokeStatsClient(cc grpc.ClientConnInterface) PokeStatsClient {
	return &pokeStatsClient{cc}
}

func (c *pokeStatsClient) GetPokeStats(ctx context.Context, in *PokeStatsRequest, opts ...grpc.CallOption) (*PokeStatsResponse, error) {
	out := new(PokeStatsResponse)
	err := c.cc.Invoke(ctx, PokeStats_GetPokeStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PokeStatsServer is the server API for PokeStats service.
// All implementations must embed UnimplementedPokeStatsServer
// for forward compatibility
type PokeStatsServer interface {
	GetPokeStats(context.Context, *PokeStatsRequest) (*PokeStatsResponse, error)
	mustEmbedUnimplementedPokeStatsServer()
}

// UnimplementedPokeStatsServer must be embedded to have forward compatible implementations.
type UnimplementedPokeStatsServer struct {
}

func (UnimplementedPokeStatsServer) GetPokeStats(context.Context, *PokeStatsRequest) (*PokeStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPokeStats not implemented")
}
func (UnimplementedPokeStatsServer) mustEmbedUnimplementedPokeStatsServer() {}

// UnsafePokeStatsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PokeStatsServer will
// result in compilation errors.
type UnsafePokeStatsServer interface {
	mustEmbedUnimplementedPokeStatsServer()
}

func RegisterPokeStatsServer(s grpc.ServiceRegistrar, srv PokeStatsServer) {
	s.RegisterService(&PokeStats_ServiceDesc, srv)
}

func _PokeStats_GetPokeStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PokeStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokeStatsServer).GetPokeStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PokeStats_GetPokeStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokeStatsServer).GetPokeStats(ctx, req.(*PokeStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PokeStats_ServiceDesc is the grpc.ServiceDesc for PokeStats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PokeStats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PokeStats",
	HandlerType: (*PokeStatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPokeStats",
			Handler:    _PokeStats_GetPokeStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_poke_stats.proto",
}
